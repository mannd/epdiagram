//
//  Mark.swift
//  EP Diagram
//
//  Created by David Mann on 5/8/19.
//  Copyright Â© 2019 EP Studios. All rights reserved.
//

// We import UIKit here and elsewhere to use CGFloat and avoid conversions
// of Double to CGFloat.
import UIKit
/* Aside on Marks vs Connections
 Marks don't really need start and end positions; a typical Mark is vertical and start = end.  A Connection is similar to a Mark, except it has different start and end points, it cannot be a locus of impulse origin, and its start and end points are defined by two Marks.  Actually this isn't the whole story either.  An impulse can arise in a zone of conduction and propagate in 1 or 2 directions.  Connections can be blocked, at different levels in the zone of conduction.  Two or more Connections can be generated by one Mark (e.g. dual AV nodal pathways).  Also reentry can occur in a zone of conduction.  So we need ways to indicate:
        start and end Marks
        conduction block
        reentry
        impulse formation
        etc.?

 Most likely a long press on a Connection can offer these options.
 */

// A Mark is the little line drawn on the ladder, such as the vertical line for
// atrial activation.  It isn't necessarily vertical, as in the AV region, so it
// has a start and end position.  The Mark only cares about its horizontal positioning;
// Regions care about vertical positioning.  The height of a Mark is determined by the height of the Region it lives in.  A Mark represent the origin of an impulse.

// Idea for indicating origin of impulse.  Opaque dot at origin.

// Should conduction be slanted to indication P duration, QRS duration?  Need to indicate impulse formation in midst of region, e.g. PAC, PJC, PVC?

// Also, see this attempt at a ladder diagram program, the only one I can find: https://epfellow.wordpress.com/2010/11/04/electrocardiogram-ecgekg-ladder-diagrams/

// Presumably start and end positions are top to bottom.
class Mark {
    enum Origin {
        case atStart
        case atEnd
        case atMiddle
        case notOrigin
    }

    public var start: CGFloat = 0
    public var end: CGFloat = 0
    public var selected: Bool = false
    public var hasCursor: Bool = false
    public var attached: Bool = false
    public var origin: Origin = .notOrigin
    // public var connections: [Connection] = []

    let unselectedColor = UIColor.black
    let selectedColor = UIColor.magenta
    let width: CGFloat = 2

    var color: UIColor {
        get {
            if selected {return selectedColor}
            else {return unselectedColor}
        }
    }

    init() {
        // all fields automatically initialized
    }

    convenience init(location: CGFloat) {
        self.init()
        start = location
        end = location
    }
}
